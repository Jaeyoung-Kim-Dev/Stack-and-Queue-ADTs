/**
 * 
 */
package application;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import exceptions.EmptyStackException;
import utilities.*;

/**
 * @author kornk
 *
 */
public class AppDriver {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException {
		MyStack<String> stack = new MyStack<String>();
		MyQueue<String> errorQ = new MyQueue<String>();
		MyQueue<String> extrasQ = new MyQueue<String>();

		String fileName = "res/sample2.xml"; // args[0];

		int lineNumber = 1;

		// Open the file
		File file = new File(fileName);
		Scanner inFile = new Scanner(file);

		// Skip the prolog tag
		inFile.nextLine();
		boolean collectStr = false;
		String tmpLine = "";

		// Read from the file
		while (inFile.hasNext()) {
			lineNumber++;
			tmpLine = "";
			String line = inFile.nextLine().trim();

			for (int i = 0; i < line.length(); i++) {

				char curChar = line.charAt(i);

				if (curChar == '<' && !collectStr) {
					collectStr = true;
				} else if (curChar != '>' && collectStr) {
					tmpLine += curChar;
				} else if (curChar == '>' && collectStr) {
					collectStr = false;
				} else if (curChar == '>' && !collectStr) {					
					errorQ.enqueue("Error: Unexpected > (Line #" + lineNumber + ")");
					System.out.println("Error: Unexpected > (Line #" + lineNumber + ")");
				}

				if (tmpLine != "" && !collectStr) {
					if (isSelfClosingTag(tmpLine)) {
						//break;
					} else if (isStartTag(tmpLine)) {
						String tmpLineSplit[] = tmpLine.split(" ", 2); // split tag and parameters
						stack.push(tmpLineSplit[0]);
						//break;
					} else if (isClosingTag(tmpLine)) {
						// System.out.println("Closing tag" + tmpLine);
						try {
							String tag = stack.pop();
							if (tag.equals(tmpLine.substring(1, tmpLine.length()))) {
								System.out.println(tmpLine + "Tag matches. (Line #" + lineNumber + ")");
							} else if (tag.equals(errorQ.peek())) {
								errorQ.dequeue();
							} else if (stack.size() == 0) {
								errorQ.enqueue(tmpLine);
							} else {
								int search = stack.search(tmpLine.substring(1, tmpLine.length()));
								if (search > 0) { // element found. The first index starts with 1 not 0.									
									for (int j = 0; j < search; j++) {
										stack.pop();
									}
									String errorQmsg = "Error: The " + tag + " tag wasn't closed before the "
											+ tmpLine + " tag (Line #" + lineNumber + ")";
									errorQ.enqueue(errorQmsg);
								} else { // element NOT found.
									String eatrasQmsg = "Error: The " + tmpLine + " tag does not have a match (Line #"
											+ lineNumber + ")";
									extrasQ.enqueue(eatrasQmsg);
								}
							}
							//break;
						} catch (EmptyStackException e) {
							errorQ.enqueue(tmpLine);
							// e.printStackTrace();
						}
					}
				}
			}
			//System.out.print("break");
		}

//		while (!stack.isEmpty()) {
//			try {
//				errorQ.enqueue(stack.pop());
//			} catch (EmptyStackException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}

		// If stack is not empty, pop each E into errorQ
		// If either queue is empty (but not both), report each E in both queues as
		// error
		// If both queues are not empty, peek both queues
		// If they don¡¯t match, dequeue from errorQ and report as error
		// Else dequeue from both
		// Repeat until both queues are empty

		// Pop off the stack.
//		try {
//			String tag1 = stack.pop();
//		} catch (EmptyStackException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//
//		// Add to queue
//		errorQ.enqueue("tag");
//
//		// Dequeue
//		String tag2 = errorQ.dequeue();
//		
//		System.out.print("break");
//		System.out.print("break");
	}

	private static boolean isPrologTag(String line) {
		return false;
		// Check if it's a prolog tag (i.e. <?xml version="1.0" encoding="UTF-8"?>)
	}

	/**
	 * Check if it's self closing (i.e. <tag />)
	 * 
	 * @param tmpLine
	 * @return
	 */
	private static boolean isSelfClosingTag(String tmpLine) {
		return tmpLine.charAt(0) != '/' && tmpLine.charAt(tmpLine.length() - 1) == '/';
	}

	/**
	 * Check if it's a starting tag (i.e. <tag>)
	 * 
	 * @param tmpLine
	 * @return
	 */
	private static boolean isStartTag(String tmpLine) {
		return tmpLine.charAt(0) != '/' && tmpLine.charAt(tmpLine.length() - 1) != '/';
	}

	/**
	 * Check if it's a closing tag (i.e. </tag>)
	 * 
	 * @param tmpLine
	 * @return
	 */
	private static boolean isClosingTag(String tmpLine) {
		return tmpLine.charAt(0) == '/' && tmpLine.charAt(tmpLine.length() - 1) != '/';
	}

}
